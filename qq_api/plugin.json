{
  "schema_version": 1,
  "id": "qq_api",
  "authors": [
    "Andy Zhang"
  ],
  "repository": "https://github.com/AnzhiZhang/MCDReforgedPlugins",
  "branch": "master",
  "related_path": "qq_api",
  "labels": [
    "api"
  ],
  "introduction": {
    "en_us": "# QQAPI\n\n> QQ bot development API.\n\n## Usage\n\n### QQ Bot Configuration\n\nIt is recommended to use [go-cqhttp](https://github.com/Mrs4s/go-cqhttp).\n\nSet qq account and password in `account` field:\n\n```yaml\naccount:\n  uin: 1233456\n  password: ''\n```\n\nAdd http server in `servers` field:\n\n```yaml\nservers:\n  - http:\n      address: 0.0.0.0:5700\n      post:\n      - url: http://127.0.0.1:5701/\n```\n\n## 配置文件\n\n`post_host`\n\n默认值: `127.0.0.1`\n\n接收转发消息的ip地址\n\n`post_port`\n\n默认值: `5701`\n\n接收转发消息的端口\n\n`api_host`\n\n默认值: `127.0.0.1`\n\napi的ip地址\n\n`api_port`\n\n默认值: `5700`\n\napi的端口\n\n### 关于多服使用\n\n`QQBridge` 是一个可以将机器人上报消息分发给多个服务器进行处理的应用。\n\n直接运行 `QQBridge.py` 即可。\n\n#### 指令\n\n| 指令 | 功能 |\n| - | - |\n| stop | 关闭QQBridge |\n| help | 获取帮助 |\n| reload config | 重载配置文件 |\n| debug thread | 查看线程列表 |\n\n#### 配置\n\n`post_host`\n\n接收上报信息的地址\n\n默认值: `127.0.0.1`\n\n`post_port`\n\n接收上报信息的端口\n\n默认值: `5701`\n\n`post_utl`\n\n接收上报信息的url\n\n默认值: `/post`\n\n以上接收上报消息的配置与 [readme.md](../readme.md) 对应\n\n`server_list`\n\n需要转发的服务器列表, 参照以下格式填写\n\n```yaml\nexample:\n  host: 127.0.0.1\n  port: 5702\n  url: ''\n```\n\n默认值: 上文的例子\n\n`debug_mode`\n\n调试模式\n\n默认值: `flase`\n\n> 你还需要修改 QQAPI 配置文件的 `post_host`, `post_port` 使其与 `server_list` 的内容对应\n>\n> 建议从 `5702` 向上增加，如第一个服为 `5702` 第二个服为 `5703`\n\n## 开发\n\n[示例模范插件 QQChat](https://github.com/AnzhiZhang/MCDReforgedPlugins/tree/master/qq_chat)\n\n### 事件\n\n当从QQ接收到消息, 会触发以下各类事件\n\n每个事件监听器需要使用 `register_event_listener` API 注册, 事件ID为 `qq_api.事件名`\n\n- `server`：[PluginServerInterface](https://mcdreforged.readthedocs.io/zh_CN/latest/code_references/PluginServerInterface.html)\n- `bot`：[CQHttp](https://aiocqhttp.nonebot.dev/module/aiocqhttp/index.html#aiocqhttp.CQHttp)\n- `event`：[Event](https://aiocqhttp.nonebot.dev/module/aiocqhttp/index.html#aiocqhttp.Event)，其中 `on_message` 的参数为 `MessageEvent`，增加了 `content` 属性，为处理后的消息。\n\n| 事件 | 参考 |\n| - | - |\n| on_message(server, bot, event) | [on_message](https://aiocqhttp.nonebot.dev/module/aiocqhttp/index.html#aiocqhttp.CQHttp.on_message) |\n| on_notice(server, bot, event) | [on_notice](https://aiocqhttp.nonebot.dev/module/aiocqhttp/index.html#aiocqhttp.CQHttp.on_notice) |\n| on_request(server, bot, event) | [on_request](https://aiocqhttp.nonebot.dev/module/aiocqhttp/index.html#aiocqhttp.CQHttp.on_request) |\n| on_meta_event(server, bot, event) | [on_meta_event](https://aiocqhttp.nonebot.dev/module/aiocqhttp/index.html#aiocqhttp.CQHttp.on_meta_event) |\n\n### API\n\n#### get_event_loop()\n\n用于获取 `asyncio` 的 `event_loop`。\n\n#### get_bot()\n\n用于获取 `CQHttp` 的实例。\n",
    "zh_cn": "# QQAPI\n\n> QQ bot development API.\n\n## Usage\n\n### QQ Bot Configuration\n\nIt is recommended to use [go-cqhttp](https://github.com/Mrs4s/go-cqhttp).\n\nSet qq account and password in `account` field:\n\n```yaml\naccount:\n  uin: 1233456\n  password: ''\n```\n\nAdd http server in `servers` field:\n\n```yaml\nservers:\n  - http:\n      address: 0.0.0.0:5700\n      post:\n      - url: http://127.0.0.1:5701/\n```\n\n## 配置文件\n\n`post_host`\n\n默认值: `127.0.0.1`\n\n接收转发消息的ip地址\n\n`post_port`\n\n默认值: `5701`\n\n接收转发消息的端口\n\n`api_host`\n\n默认值: `127.0.0.1`\n\napi的ip地址\n\n`api_port`\n\n默认值: `5700`\n\napi的端口\n\n### 关于多服使用\n\n`QQBridge` 是一个可以将机器人上报消息分发给多个服务器进行处理的应用。\n\n直接运行 `QQBridge.py` 即可。\n\n#### 指令\n\n| 指令 | 功能 |\n| - | - |\n| stop | 关闭QQBridge |\n| help | 获取帮助 |\n| reload config | 重载配置文件 |\n| debug thread | 查看线程列表 |\n\n#### 配置\n\n`post_host`\n\n接收上报信息的地址\n\n默认值: `127.0.0.1`\n\n`post_port`\n\n接收上报信息的端口\n\n默认值: `5701`\n\n`post_utl`\n\n接收上报信息的url\n\n默认值: `/post`\n\n以上接收上报消息的配置与 [readme.md](../readme.md) 对应\n\n`server_list`\n\n需要转发的服务器列表, 参照以下格式填写\n\n```yaml\nexample:\n  host: 127.0.0.1\n  port: 5702\n  url: ''\n```\n\n默认值: 上文的例子\n\n`debug_mode`\n\n调试模式\n\n默认值: `flase`\n\n> 你还需要修改 QQAPI 配置文件的 `post_host`, `post_port` 使其与 `server_list` 的内容对应\n>\n> 建议从 `5702` 向上增加，如第一个服为 `5702` 第二个服为 `5703`\n\n## 开发\n\n[示例模范插件 QQChat](https://github.com/AnzhiZhang/MCDReforgedPlugins/tree/master/qq_chat)\n\n### 事件\n\n当从QQ接收到消息, 会触发以下各类事件\n\n每个事件监听器需要使用 `register_event_listener` API 注册, 事件ID为 `qq_api.事件名`\n\n- `server`：[PluginServerInterface](https://mcdreforged.readthedocs.io/zh_CN/latest/code_references/PluginServerInterface.html)\n- `bot`：[CQHttp](https://aiocqhttp.nonebot.dev/module/aiocqhttp/index.html#aiocqhttp.CQHttp)\n- `event`：[Event](https://aiocqhttp.nonebot.dev/module/aiocqhttp/index.html#aiocqhttp.Event)，其中 `on_message` 的参数为 `MessageEvent`，增加了 `content` 属性，为处理后的消息。\n\n| 事件 | 参考 |\n| - | - |\n| on_message(server, bot, event) | [on_message](https://aiocqhttp.nonebot.dev/module/aiocqhttp/index.html#aiocqhttp.CQHttp.on_message) |\n| on_notice(server, bot, event) | [on_notice](https://aiocqhttp.nonebot.dev/module/aiocqhttp/index.html#aiocqhttp.CQHttp.on_notice) |\n| on_request(server, bot, event) | [on_request](https://aiocqhttp.nonebot.dev/module/aiocqhttp/index.html#aiocqhttp.CQHttp.on_request) |\n| on_meta_event(server, bot, event) | [on_meta_event](https://aiocqhttp.nonebot.dev/module/aiocqhttp/index.html#aiocqhttp.CQHttp.on_meta_event) |\n\n### API\n\n#### get_event_loop()\n\n用于获取 `asyncio` 的 `event_loop`。\n\n#### get_bot()\n\n用于获取 `CQHttp` 的实例。\n"
  }
}